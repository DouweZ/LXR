____globals____
parameters - this is an array of all the parameters that are currently active in the front panel. 
these include all the settings for each voice. Each element consists of a value and a datatype. 
The datatype dictates how that parameter is rendered on the screen. It might be possible to move 
this datatype into progmem as it doesn't change. Right now there appear to be 255 parameters. 
Toward the end of this array are parameters that are updated based on the active step in the active 
pattern and voice

____interesting functions_____
menu.c:menu_repaint - this is the guts of the code that updates the display.

___menu structure___
For most of the menus, the hierarchy is stored in menuPages array. This is an array of Page arrays. Each Page has 8
text indicators, and 8 parameters. The text indicators (the top* elements) point to the text that should be displayed
for that item. And the parameters (bot* elements) refer to the parameter that is being edited in that slot. 

___modulation stuff___
There are 3 types of modulation

Velocity__
params: PAR_VEL_DEST_1-6
data type: DTYPE_TARGET_SELECTION_VELO 
You can modulate a parameter based on the velocity value on each step for a voice. You select one parameter to modulate.
The parameter is one of the parameters on the SAME voice. The left 5 bits of the param value select the page
within the voice and the right 3 bits select one of the 8 params on that page. This resolves ultimately to a parameter
which is applicable to that voice. It can be empty though because some menu items are empty. The data that gets sent to
the back is a parameter number and the voice number.

Strategy for fix: the param value will change to represent a value in modTargets rather than an encoded reference into
to menu pages. (search **VELO in the code). This means the value range will not be 0..n but rather n..m where n is the
start for that voice and m is the end.

LFO__
params: PAR_TARGET_LFO*
data type: DTYPE_TARGET_SELECTION_LFO
LFO's can target a parameter to modulate. A separate parameter controls which voice the parameter is on. So therefore
the param value represents a parameter on that voice. Left 5 bits of the param value select the page, and right 3 bits
selects one of the 8 params on that page. works similar to velocity above.

Strategy: same as velocity search **LFO

Automation__
params: PAR_P1_DEST, PAR_P2_DEST
data type: DTYPE_AUTOM_TARGET
sequencer modulation - per sequencer step, you can modulate two parameters. The value here represents a parameter number,
so you can select any of the voice parameter values (effectively letting you modulate a param on any voice).
menu_cc2name is used here to lookup descriptive name for a parameter. This is different from lfo and velocity in that the value
represents a parameter directly
Problem: some of the values are invalid mod targets.
menu_cc2name is just a way to get a name index and a voice number given a parameter number. This name index is into valueNames array
which itself is a reference to long names, short names and category names for everything. menu_cc2name is only used by automation target.
frontParser_stepData is a struct in front that stores among other things, these two values. It seems that it's only used to 
store values it requests from cortex so that it can save these to sd card and vice versa.

Strategy for automation target fix: (search for **AUTOM in the code)
- Do not modify the cortex side. so all changes are done in front
- store an index into a valid list which is sane and sorted by voice then page then value (store in PAR_P*_DEST)
- any time we receive a value from cortex, we translate it to this value
- any time we send the value to cortex we translate it to a param number
- frontParser_stepData doesn't need to change because it's only used for transferring data between file and sequencer and vice versa
- 

