___modulation stuff___
There are 3 types of modulation

Velocity__
params: PAR_VEL_DEST_1-6
data type: DTYPE_TARGET_SELECTION_VELO 
You can modulate a parameter based on the velocity value on each step for a voice. You select one parameter to modulate.
The parameter is one of the parameters on the SAME voice. The left 5 bits of the param value select the page
within the voice and the right 3 bits select one of the 8 params on that page. This resolves ultimately to a parameter
which is applicable to that voice. It can be empty though because some menu items are empty. The data that gets sent to
the back is a parameter number and the voice number.

Strategy for fix: the param value will change to represent a value in modTargets rather than an encoded reference into
to menu pages. (search **VELO in the code). This means the value range will not be 0..n but rather n..m where n is the
start for that voice and m is the end.

LFO__
params: PAR_TARGET_LFO*, PAR_VOICE_LFO*
data type: DTYPE_TARGET_SELECTION_LFO
LFO's can target a parameter to modulate. A separate parameter controls which voice the parameter is on. So therefore
the param value represents a parameter on that voice. Left 5 bits of the param value select the page, and right 3 bits
selects one of the 8 params on that page. works similar to velocity above. 
We are in effect storing duplicate info here. The voice number is purely for ui whereas the target effectively stores both
the voice and the param on that voice since it's just an offset into modTargets which includes parameters on all voices.
the voice number is 1 based.

Strategy: same as velocity search **LFO

Automation__
params: PAR_P1_DEST, PAR_P2_DEST
data type: DTYPE_AUTOM_TARGET
sequencer modulation - per sequencer step, you can modulate two parameters. The value here represents a parameter number,
so you can select any of the voice parameter values (effectively letting you modulate a param on any voice).
menu_cc2name is used here to lookup descriptive name for a parameter. This is different from lfo and velocity in that the value
represents a parameter directly
Problem: some of the values are invalid mod targets.
menu_cc2name is just a way to get a name index and a voice number given a parameter number. This name index is into valueNames array
which itself is a reference to long names, short names and category names for everything. menu_cc2name is only used by automation target.
frontParser_stepData is a struct in front that stores among other things, these two values. It seems that it's only used to 
store values it requests from cortex so that it can save these to sd card and vice versa.

Strategy for automation target fix: (search for **AUTOM in the code)
- Do not modify the cortex side. so all changes are done in front
- store an index into a valid list which is sane and sorted by voice then page then value (store in PAR_P*_DEST)
- any time we receive a value from cortex, we translate it to this value
- any time we send the value to cortex we translate it to a param number
- frontParser_stepData doesn't need to change because it's only used for transferring data between file and sequencer and vice versa


___fixes in progress (QA test list)___
- Added midi note off when switching patterns
- Added midi note off when changing midi channel
- Added midi note off when muting voice
- Move midi note off into function (affects sequencer playing, should still send note off, and stop sequencer should send all off)
- front parset set p1 dest optimize (autom targets 1 and 2 should still default to off)

mtc stuff
- rearrange some code in midi parser for readability
- add code in front to recognize start/stop from back and toggle sequncer play stop (the led is meaningless as it flashes)
- play will start when mtc 0:0:0:0 received and stop when mtc stops
- prog change is recognized on MIDI port and causes pattern change
- prog change is sent to MIDI port when a pattern changes
- fix midiparser to properly recognize channel messages

routing stuff
- MidiStruct is modified to store more info for routing
- code rearranged so that parseMidiMessage handles all messages and does routing midi and usb
- add menu item for midi routing which can be in 1 of 6 states
- midi routing menu item will set routing options on back end
- back end will respond to midi routing options and save state
- back end will route midi messages to usb/midi as appropriate
- usb_sendMidi is changed to take a midi message so that it can check the number of bytes to send
- keep track of sysex mode, and use this for routing sysex data properly 
still needed:
still need work in usb reception of sysex data bytes (how many bytes will be set at a time?)
need to properly interpret note-on messages according to the setting of midi note for each voice
check the program change as it relates to channels

filtering stuff:
- added function to set filter byte
- added code in midi parsing to ignore messages if they are filtered
- added code in sequencer to not send out messages if they are filtered
- fixed avr side to add two new menu items for tx filter and rx filter
- avr side code to send filter settings
- back end code to receive filter settings and set bits
- prog change code will now send on the channel associated with voice 1

global menu expansion:
This allows the global menu to have more than 8 items. Code might be designated with GMENU.
- button handling code refactoring. This was done to make the code easier to read and maintain
  + designate functions as static to aid inlining
  + move functions to keep all static ones together
  + comment out unused functions
  + buttonHandler_buttonReleased - reduce comparisons by simplifying case stmt
  + break out sequence and part select buttons into own functions buttonHandler_seqButtonReleased and buttonHandler_partButtonReleased
  + buttonHandler_seqButtonReleased comment out timer action check (timer would not be armed in that place)
  + buttonHandler_buttonPressed - reduce comparisons by simplifying case stmt
  + break out sequence, part and voice button presses into own functions 
- menu_switchPage - add specific handling for MENU_MIDI_PAGE ( was handled under default case which might have been problematic now or in the future)
- param fetch lock fix to work if switching to another global sub-page
- when in global menu, and there are pages both before and after current, show a * for the cursor
- when in global menu, allow moving to next sub-page if there is a param available on the next page
- break out menu_moveToMenuItem and menu_encoderChangeParameter for readability/maintainability
- menu_moveToMenuItem - this was made simpler, also fixed to handle the global menu page switches. also allow up to 3 skip items

midi note handling:
This functionality allows midi notes received on channels to be handled in a way that is consistent with how the 
midi note setting is set for each voice. If a voice's midi note setting is set to "any" and a note is received on the
channel designated for that voice, the drum sound is triggered with that note value. If the setting is a specific note, then
only that note will cause the drum sound to trigger (with the default note value)
- make some functions static
- voiceControl_noteOn - this is to consolidate code that plays a voice, blinks the led and does the hardware triggers (there was duplicated code)
- midiParser_noteOn - check midi note for voice against "any" or the note coming in
- midiParser_parseMidiMessage - for note on/note off we loop through the voices to see what channels are listening
- NOTE_VOICE* comment out, as we don't need these (Each voice is configurable now)
- seq_addNote now takes the note value to add

- todo check shift button release when in perf mode. should it do anything with mute led's on voices? (code might have a bug)
- todo check that shift voice in perf mode unmutes all up to clicked voice

bar reset switch:
- This allows you to reset the bar to 1 when a pattern change is requested. It avoid the bar counting which causes patterns to
  fit a certain way (as described on p24 of manual). search for seq_resetBarOnPatternChange
  
Global midi channel:
- added a global midi channel setting. This affects
  + prog change - pc will only respond on this channel (used to be channel assoc with voice 0)
  + ctrl change - cc will only respond on this channel (used to be channel assoc with voice 0)
  + currently active voice will always respond to notes on this channel
- Was able to reuse a front-to-back message and some of the code by adding an 8th element that represents this channel
- midi_MidiChannels now has 8 elements where the last one represents global channel
- recording will only take place on the active voice (will not record on voices when record is on and messages are received
  on their respective channels). This makes more sense for live recording on one keyboard.
- when playing notes on global channel from ext keyboard, they will be echoed to channel assigned to that voice

Erase mode and record fix (**RECORD)
This allows you to hold shift-clear while record is active and sequencer is playing to erase notes as they are 
encountered. If a main step is encountered while this mode is on, that main step and all substeps are erased. Only
the active flags are set (velocity, automation, note value remain untouched). Should they be zeroed out?
- add seqErasing mode to buttonHandler_stateMemory. This tracks whether we are in erase mode
- add SEQ_ERASE_ON_OFF message that is sent from front to back to toggle erase mode
- detect if copy button is pressed while shift is active. if so turn on erase mode and send erase message to back.
- detect when erase mode is active and either copy button or shift button is released. if so turn off erase mode
- make some functions static to aid in compiler optimization. fix desired inline functions that had ext linkage
- in seq_nextStep detect when erasing and main step is encountered. erase step and substeps

Fix recording across pattern boundaries. This forces a quantized note onto the next pattern if it would end up
at position 0.
- Move next pattern determination into it's own function to isolate logic
- seq_addNote will check to see whether a note should end up on a different pattern
- consolidate step clearing code. reduce code size by using ptrs instead of a lot of indexing (shaved 300 bytes!)

Save all and performance (**SAVEALL):
Will allow you to save all data in one file for selection and loading (settings, kit, pattern). Will allow you to save
performance data in one file for selection and loading (kit, pattern). There will be two new load and save options:
"All", "Perform". When loading All, or perform data, the sequencer must be stopped (can figure out that one later).
File will be:
 Perform file:
NAMEXXXX[version byte][kit data][pattern data]

all file:
NAMEXXXX[version byte][globals][kit data][pattern data]

Pattern data is last since it's easier to anticipate new kit settings and pad that out.

- removed sprintf calls (saving 1378 bytes progmem and 20 bytes ram!)
- moved numtostr* functions to shared
- add preset_saveAll which saves either all or performance
- add preset_loadAll which loads either all or performance
- separated the 3 load and 3 save functions to separate the file open/read preset name from the loading of the data.
  This allows the data loading code to be called from preset_loadAll and preset_saveAll
- the loadAll and saveAll have a version check and padding which should aid in loading old files in future versions
- Add new SAVE_STATE types - saveOptions.what should still be able to hold the value.
- menu_repaintLoadSavePage - this was refactored to reduce code footprint and also add new types
- menu_handleLoadSaveMenu - Add hooks to call load and save for perf and all
- preset_loadName - consolidate for loading the name of any preset type

QA
check repainting of load save page thoroughly

bugs:
- need to update led's during erase mode
- while erasing realtime, a note will play (not the note being recorded, just the same note for each step that is erased)
